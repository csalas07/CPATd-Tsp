/*cout << "Valor x: " << x << endl;
		cout << "Valor y: " << y << endl;
		cout << "Valor z: " << z << endl;
		printf("\n");

		for (k = 0; k < z; k++) {
			cout << "D " << k + 1 << endl;
			for (i = 0; i < x; i++) {
				for (j = 0; j < y; j++) {
					cout << Inst[i][j][k] << ", ";
				}
				printf("\n");
			}
			printf("\n");
		}*/
------------------------------------Main Class-------------------------------------------------------
#include <conio.h>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <tchar.h>
#include <string>
#include <math.h>
#include <cmath>

#include "Memory.h"
#include "ReadFiles.h"

using namespace std;


int main() {

	int a,i,j,k, x, y, z;
	int Mx, My, Mz;
	//Lista de rutas
	int *** Inst;
	//Lista de archivos
	char** FileList;
	//Numero de archivos 
	int NFiles;
	FILE* f;

	NFiles = ReadFiles::CountLines("ListF.txt"); //Cuenta la lista de archivos
	FileList = Memory::ReserveBiVectorChar(NFiles, 30); //Memoria a la lista de archivos
	ReadFiles::ReadF("ListF.txt", &FileList, NFiles); //Almacenamiento de la lista de archivos
	ReadFiles::GetMaxObjects(FileList, NFiles, &Mx, &My, &Mz); //Almacenamiento del maximo tamaï¿½o del arreglo
	Inst = Memory::ReseveTriVectorInt(Mx, My, Mz); //Memoria al arreglo de instancias

	for (a = 0; a < NFiles; a++) {
		ReadFiles::ReadInstances(FileList[a], &Inst, &x, &y, &z); //Lectura de la instancia
	}


	for (k = 0; k < Mz; k++) {
		for (i = 0; i < Mx; i++) {
			for (j = 0; j < My; j++) {
				cout << Inst[i][j][k] << ",";
			}
			printf("\n");
		}
		printf("\n");
	}

	_getch();
}
-------------------------------------------------------------------------------------------------
-----------------------------------------ReadFilesClass------------------------------------------
#include "ReadFiles.h"
#include <stdio.h>
#include <stdlib.h>
#include <tchar.h>
#include <time.h>
#include <iostream>
#include <iomanip>
#include <fstream>
#include <string>

using namespace std;

#define Gmax(a,b) (a>b ? a : b)

//Cuenta los elementos de la lista de archivos
int ReadFiles::CountLines(const char* TxtName) {
	int count = 0;
	string line;
	ifstream inFile;
	inFile.open(TxtName);

	if (!inFile) {
		cout << "No se ha podido leer el archivo";
		exit(1); // terminate with error
	}

	while (getline(inFile, line)) {
		count++;
	}

	inFile.close();
	//cout << "Sum = " << count << endl; 
	return count;
}

//Almacena la lista de archivos
void ReadFiles::ReadF(const char* TxtName, char*** ListF, int n) {
	int i,j=0;

	//FILE* f = fopen(TxtName, "r");
	FILE* f;
	errno_t err;
	
	err = fopen_s(&f,TxtName, "r");

	if (err == 0) {
		for (i = 0; i < n; i++) {
			//fscanf(f,"%s", &(*ListF)[i][j]);
			fscanf_s(f, "%s", (*ListF)[i],30);
			//sscanf_s("%s", &*ListF[i][j]);
		}


		if (f) {
			err= fclose(f);

			if (err!=0) {
				exit(6);
			}

		}
	}else {
		exit(6);
	}
	
}

//Obtiene los valores maximos de los arreglos
void ReadFiles::GetMaxObjects(char** ListF, int n, int* Mx, int* My, int* Mz) {
	int i;
	int MaxX=0, MaxY=0, MaxZ=0;
	int MxX, MxY, MxZ;
	FILE* f;
	for (i = 0; i < n; i++){
		fopen_s(&f, ListF[i], "r");
		fscanf_s(f, "%i", &MxX, 1); //Max X
		fscanf_s(f, ",%i", &MxY, 1); //Max Y
		fscanf_s(f, ",%i", &MxZ, 1); //Max Z

		MaxX = Gmax(MaxX, MxX);
		MaxY = Gmax(MaxY, MxY);
		MaxZ = Gmax(MaxZ, MxZ);
		fclose(f);
	}
	*Mx = MaxX;
	*My = MaxY;
	*Mz = MaxZ;
}

//Lectura de las instancias
void ReadFiles::ReadInstances(const char* TxtName, int**** Inst, int* x, int* y, int* z) {
	int i, j, k;
	FILE* f;
	
	fopen_s(&f, TxtName, "r");
	fscanf_s(f, "%i", &(*x), 1);
	fscanf_s(f, ",%i", &(*y), 1);
	fscanf_s(f, ",%i", &(*z), 1);

	for (k = 0; k < *z; k++){
		for (i = 0; i < *x; i++){
			for (j = 0; j < *y; j++){
				fscanf_s(f, "%i,", &(*Inst)[i][j][k], 1);
			}
		}
		fscanf_s(f, "%*[^\n]\n");
	}
	fclose(f);
}
---------------------------------------------------------------------------------------------------------
-----------------------------------------Memory Class----------------------------------------------------
#include "Memory.h"
#include <stdlib.h>
#include <tchar.h>
#include <time.h>
#include <iostream>

void Memory::abortar(int numErr, char msg[]) {
	char date[10];
	char time[10];
	_strdate_s(date);
	_strdate_s(time);

	FILE* log;
	fopen_s(&log,"error.log", "a");

	switch (numErr) {
	case 1:
		fprintf(log, "%s\t%s\tError al abrir el archivo \"%s\"\n", date, time, msg);
		printf("\n%s\t%s\t%s\n", date, time, msg);
		break;
	case 2:
		fprintf(log, "%s\t%s\t%s\n", date, time, msg);
		printf("\n%s\t%s\t%s\n", date, time, msg);
		break;
	}

	fclose(log);
	exit(6);
}

int* Memory::ReserveVectorInt(int size) {
	int i;
	int* aux;

	aux = (int*)calloc(size, sizeof(int));

	if (!aux)
		i = 0;
	//abortar(2,(char*)"Error al reservar memoria a un vector int");


	return aux;
}

int** Memory::ReseveBiVectorInt(int row, int columns) {
	int** aux;
	int i;

	aux = (int**)calloc(row, sizeof(int*));

	for (i = 0; i < row; i++) {
		aux[i] = (int*)calloc(columns, sizeof(int));
	}

	if (!aux)
		abortar(2, (char*)"Error al reservar memoria a un Bivector int");

	return aux;
}

double* Memory::ReserveVectorDlb(int size) {

	double* aux;

	aux = (double*)calloc(size, sizeof(double));

	if (!aux)
		abortar(2, (char*)"Error al reservar memoria a un vector double");

	return aux;
}

double** Memory::ReseveBiVectorDlb(int row, int columns) {
	double** aux;
	int i;

	aux = (double**)calloc(row, sizeof(double*));

	for (i = 0; i < row; i++) {
		aux[i] = (double*)calloc(columns, sizeof(double));
	}

	if (!aux)
		abortar(2, (char*)"Error al reservar memoria a un Bivector double");

	return aux;
}

char* Memory::ReserveVectorCharInt(int size) {
	char* aux;

	aux = (char*)calloc(size, sizeof(char));

	if (!aux)
		abortar(2, (char*)"Error al reservar memoria a un vector Char");

	return aux;
}

char** Memory::ReserveBiVectorChar(int row, int columns) {
	char** aux;
	int i;

	aux = (char**)calloc(row, sizeof(char*));

	for (i = 0; i < row; i++) {
		aux[i] = (char*)calloc(columns, sizeof(char));
	}

	if (!aux)
		abortar(2, (char*)"Error al reservar memoria a un Bivector char");

	return aux;
}

float** Memory::ReseveBiVectorflt(int row, int columns) {
	float** aux;
	int i;

	aux = (float**)calloc(row, sizeof(float*));

	for (i = 0; i < row; i++) {
		aux[i] = (float*)calloc(columns, sizeof(float));
	}

	if (!aux)
		abortar(2, (char*)"Error al reservar memoria a un Bivector double");

	return aux;
}

int*** Memory::ReseveTriVectorInt(int row, int columns, int tdim) {
	int*** aux;
	int i, j;

	aux = (int***)calloc(row, sizeof(int**));

	for (i = 0; i < row; i++) {
		aux[i] = (int**)calloc(columns, sizeof(int*));
		for (j = 0; j < columns; j++) {
			aux[i][j] = (int*)calloc(tdim, sizeof(int));
		}
	}

	if (!aux)
		abortar(2, (char*)"Error al reservar memoria a un Trivector int");

	return aux;
}

double*** Memory::ReseveTriVectorDlb(int row, int columns, int tdim) {
	double*** aux;
	int i, j;

	aux = (double***)calloc(row, sizeof(double**));

	for (i = 0; i < row; i++) {
		aux[i] = (double**)calloc(columns, sizeof(double*));
		for (j = 0; j < columns; j++) {
			aux[i][j] = (double*)calloc(tdim, sizeof(double));
		}
	}

	if (!aux)
		abortar(2, (char*)"Error al reservar memoria a un Trivector double");

	return aux;
}

float*** Memory::ReseveTriVectorflt(int row, int columns, int tdim) {
	float*** aux;
	int i, j;

	aux = (float***)calloc(row, sizeof(float**));

	for (i = 0; i < row; i++) {
		aux[i] = (float**)calloc(columns, sizeof(float*));
		for (j = 0; j < columns; j++) {
			aux[i][j] = (float*)calloc(tdim, sizeof(float));
		}
	}

	if (!aux)
		abortar(2, (char*)"Error al reservar memoria a un Trivector double");

	return aux;
}
------------------------------------------------------------------------------------------------------

